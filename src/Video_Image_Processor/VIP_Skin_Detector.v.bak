/*-----------------------------------------------------------------------
								 \\\|///
							   \\  - -  //
								(  @ @  )
+-----------------------------oOOo-(_)-oOOo-----------------------------+
CONFIDENTIAL IN CONFIDENCE
This confidential and proprietary software may be only used as authorized
by a licensing agreement from CrazyBingo (Thereturnofbingo).
In the event of publication, the following notice is applicable:
Copyright (C) 2011-20xx CrazyBingo Corporation
The entire notice above must be reproduced on all authorized copies.
Author				:		CrazyBingo
Technology blogs 	: 		http://blog.chinaaet.com/crazybingo
Email Address 		: 		thereturnofbingo@gmail.com
Filename			:		VIP_Sobel_Edge_Detector.v
Data				:		2013-05-26
Description			:		Image edge detector with Sobel.
							Give up the 1th and 2th row edge data caculate for simple process
							Give up the 1th and 2th point of 1 line for simple process
Modification History	:
Data			By			Version			Change Description
=========================================================================
13/05/26		CrazyBingo	1.0				Original
14/03/16		CrazyBingo	2.0				Modification
-------------------------------------------------------------------------
|                                     Oooo								|
+-------------------------------oooO--(   )-----------------------------+
                               (   )   ) /
                                \ (   (_/
                                 \_)
-----------------------------------------------------------------------*/ 

`timescale 1ns/1ns
module VIP_Skin_Detector
#(
)
(
	//global clock
	input	clk;
	input	rst_n;
	
	//Image data prepred to be processd
	input				per_frame_vsync,	//Prepared Image data vsync valid signal
	input				per_frame_href,		//Prepared Image data href vaild  signal
	input				per_frame_clken,	//Prepared Image data output/capture enable clock
	input		[15:0]	per_img_Y,			//Prepared Image brightness input
	
	//Image data has been processd
	output				post_frame_vsync,	//Processed Image data vsync valid signal
	output				post_frame_href,	//Processed Image data href vaild  signal
	output				post_frame_clken,	//Processed Image data output/capture enable clock
	output				post_img_Bit,		//Processed Image Bit flag outout(1: Value, 0:inValid)
	
	//user interface
);

// color Domain transform
wire	[7:0]	R = {per_img_Y[15:11], 3'b111};
wire	[7:0] 	G = {per_img_Y[10:5], 2'b11};
wire 	[7:0] 	B = {per_img_Y[4:0], 3'b111};
wire  	[7:0]   max		  = (R > G) ? ((R > B) ? R : B) : ((G > B) ? G : B);  // the max value of R,G,B
wire	[7:0]   min		  = (R > G) ? ((G > B) ? B : G) : ((R > B) ? B : R);  // the min value of R,G,B
wire    [7:0]   diff      = max - min;
// calculate H (already divide by 360 and multiply by 128)
always @(posedge clk or negedge rst_n)
begin
	if(~rst_n)
		H <= 0;
	else if(max == min)
			H <= 0;
	else if(max == R & G >= B)
			H <= ((G - B) / (6 * diff)) << 10;
	else if(max == R & G < B)
			H <= ((G - B) / (6 * diff)) << 10 + 1024;
	else if(max == G)
			H <= ((B - R) / (6 * diff)) << 10 + 341;
	else if(max == B)
			H <= ((R - G) / (6 * diff)) << 10 + 682;
end
// calculate S 
always @(posedge clk or negedge rst_n)
begin
	if(~rst_n)
		S <= 0;
	else
		S <= (max == 0) ? 0 : (1 - min / max) << 10;
end
// calculate V 
always @(posedge clk or negedge rst_n)
begin
	if(~rst_n)
		V <= 0;
	else
		V <= max;
end
// skin color model
reg skin;
always @(posedge clk or negedge rst_n)
begin
	if(~rst_n)
		skin <= 0;
	else
		if( (H < 131 & H >10) & ())
end
assign post_img_Bit = skin;

//calculate Y
reg [17:0] Y, Cb, Cr;
always @(posedge clk or negedge rst_n)
begin
	if(~rst_n)
		begin
		Y <= 0;
		Cb <= 0;
		Cr <= 0;
		end
	else
		begin
		Y <= R * 264 + G * 578 + B * 101 + 1 << 14;
		Cb <= B * 450 - G * 298 - R * 152 + 1 << 17;
		Cr <= R * 450 - G * 377 - B * 73 + 1 << 17;
		end
end
// detector
always @(posedge clk or negedge rst_n)
begin
	if(~rst_n)
		Detect_by_YCbCr <= 0;
	else
		Detect_by_YCbCr <= ((Cb >(100 << 10)) &  (Cb < (127 << 100)) & (Cr >(133 << 10)) & (Cr < (173 << 10))) ? 1: 0;
end
endmodule